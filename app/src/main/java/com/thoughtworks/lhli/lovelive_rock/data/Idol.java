package com.thoughtworks.lhli.lovelive_rock.data;

import com.thoughtworks.lhli.lovelive_rock.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "IDOL".
 */
public class Idol implements java.io.Serializable {

    private Long id;
    private String name;
    private String japaneseName;
    private Boolean main;
    private Short age;
    private String birthday;
    private String astrologicalSign;
    private String blood;
    private Short height;
    private String measurements;
    private String favoriteFood;
    private String leastFavoriteFood;
    private String hobbies;
    private String attribute;
    private String year;
    private String subUnit;
    private long characterVoiceId;
    private String summary;
    private String websiteUrl;
    private String wikiUrl;
    private String wikiaUrl;
    private String officialUrl;
    private String chibi;
    private String chibiSmall;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient IdolDao myDao;

    private CharacterVoice characterVoice;
    private Long characterVoice__resolvedKey;


    public Idol() {
    }

    public Idol(Long id) {
        this.id = id;
    }

    public Idol(Long id, String name, String japaneseName, Boolean main, Short age, String birthday, String astrologicalSign, String blood, Short height, String measurements, String favoriteFood, String leastFavoriteFood, String hobbies, String attribute, String year, String subUnit, long characterVoiceId, String summary, String websiteUrl, String wikiUrl, String wikiaUrl, String officialUrl, String chibi, String chibiSmall) {
        this.id = id;
        this.name = name;
        this.japaneseName = japaneseName;
        this.main = main;
        this.age = age;
        this.birthday = birthday;
        this.astrologicalSign = astrologicalSign;
        this.blood = blood;
        this.height = height;
        this.measurements = measurements;
        this.favoriteFood = favoriteFood;
        this.leastFavoriteFood = leastFavoriteFood;
        this.hobbies = hobbies;
        this.attribute = attribute;
        this.year = year;
        this.subUnit = subUnit;
        this.characterVoiceId = characterVoiceId;
        this.summary = summary;
        this.websiteUrl = websiteUrl;
        this.wikiUrl = wikiUrl;
        this.wikiaUrl = wikiaUrl;
        this.officialUrl = officialUrl;
        this.chibi = chibi;
        this.chibiSmall = chibiSmall;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIdolDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getJapaneseName() {
        return japaneseName;
    }

    public void setJapaneseName(String japaneseName) {
        this.japaneseName = japaneseName;
    }

    public Boolean getMain() {
        return main;
    }

    public void setMain(Boolean main) {
        this.main = main;
    }

    public Short getAge() {
        return age;
    }

    public void setAge(Short age) {
        this.age = age;
    }

    public String getBirthday() {
        return birthday;
    }

    public void setBirthday(String birthday) {
        this.birthday = birthday;
    }

    public String getAstrologicalSign() {
        return astrologicalSign;
    }

    public void setAstrologicalSign(String astrologicalSign) {
        this.astrologicalSign = astrologicalSign;
    }

    public String getBlood() {
        return blood;
    }

    public void setBlood(String blood) {
        this.blood = blood;
    }

    public Short getHeight() {
        return height;
    }

    public void setHeight(Short height) {
        this.height = height;
    }

    public String getMeasurements() {
        return measurements;
    }

    public void setMeasurements(String measurements) {
        this.measurements = measurements;
    }

    public String getFavoriteFood() {
        return favoriteFood;
    }

    public void setFavoriteFood(String favoriteFood) {
        this.favoriteFood = favoriteFood;
    }

    public String getLeastFavoriteFood() {
        return leastFavoriteFood;
    }

    public void setLeastFavoriteFood(String leastFavoriteFood) {
        this.leastFavoriteFood = leastFavoriteFood;
    }

    public String getHobbies() {
        return hobbies;
    }

    public void setHobbies(String hobbies) {
        this.hobbies = hobbies;
    }

    public String getAttribute() {
        return attribute;
    }

    public void setAttribute(String attribute) {
        this.attribute = attribute;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public String getSubUnit() {
        return subUnit;
    }

    public void setSubUnit(String subUnit) {
        this.subUnit = subUnit;
    }

    public long getCharacterVoiceId() {
        return characterVoiceId;
    }

    public void setCharacterVoiceId(long characterVoiceId) {
        this.characterVoiceId = characterVoiceId;
    }

    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public String getWebsiteUrl() {
        return websiteUrl;
    }

    public void setWebsiteUrl(String websiteUrl) {
        this.websiteUrl = websiteUrl;
    }

    public String getWikiUrl() {
        return wikiUrl;
    }

    public void setWikiUrl(String wikiUrl) {
        this.wikiUrl = wikiUrl;
    }

    public String getWikiaUrl() {
        return wikiaUrl;
    }

    public void setWikiaUrl(String wikiaUrl) {
        this.wikiaUrl = wikiaUrl;
    }

    public String getOfficialUrl() {
        return officialUrl;
    }

    public void setOfficialUrl(String officialUrl) {
        this.officialUrl = officialUrl;
    }

    public String getChibi() {
        return chibi;
    }

    public void setChibi(String chibi) {
        this.chibi = chibi;
    }

    public String getChibiSmall() {
        return chibiSmall;
    }

    public void setChibiSmall(String chibiSmall) {
        this.chibiSmall = chibiSmall;
    }

    /** To-one relationship, resolved on first access. */
    public CharacterVoice getCharacterVoice() {
        long __key = this.characterVoiceId;
        if (characterVoice__resolvedKey == null || !characterVoice__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CharacterVoiceDao targetDao = daoSession.getCharacterVoiceDao();
            CharacterVoice characterVoiceNew = targetDao.load(__key);
            synchronized (this) {
                characterVoice = characterVoiceNew;
            	characterVoice__resolvedKey = __key;
            }
        }
        return characterVoice;
    }

    public void setCharacterVoice(CharacterVoice characterVoice) {
        if (characterVoice == null) {
            throw new DaoException("To-one property 'characterVoiceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.characterVoice = characterVoice;
            characterVoiceId = characterVoice.getId();
            characterVoice__resolvedKey = characterVoiceId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
