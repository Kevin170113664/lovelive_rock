package com.thoughtworks.lhli.lovelive_rock.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG".
*/
public class SongDao extends AbstractDao<Song, Long> {

    public static final String TABLENAME = "SONG";

    /**
     * Properties of entity Song.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Romaji_name = new Property(2, String.class, "romaji_name", false, "ROMAJI_NAME");
        public final static Property Translated_name = new Property(3, String.class, "translated_name", false, "TRANSLATED_NAME");
        public final static Property Attribute = new Property(4, String.class, "attribute", false, "ATTRIBUTE");
        public final static Property BPM = new Property(5, Short.class, "BPM", false, "BPM");
        public final static Property Time = new Property(6, Short.class, "time", false, "TIME");
        public final static Property EventId = new Property(7, long.class, "eventId", false, "EVENT_ID");
        public final static Property Rank = new Property(8, Short.class, "rank", false, "RANK");
        public final static Property Daily_rotation = new Property(9, String.class, "daily_rotation", false, "DAILY_ROTATION");
        public final static Property Daily_rotation_position = new Property(10, Short.class, "daily_rotation_position", false, "DAILY_ROTATION_POSITION");
        public final static Property Image = new Property(11, String.class, "image", false, "IMAGE");
        public final static Property Easy_difficulty = new Property(12, Short.class, "easy_difficulty", false, "EASY_DIFFICULTY");
        public final static Property Easy_notes = new Property(13, Short.class, "easy_notes", false, "EASY_NOTES");
        public final static Property Normal_difficulty = new Property(14, Short.class, "normal_difficulty", false, "NORMAL_DIFFICULTY");
        public final static Property Normal_notes = new Property(15, Short.class, "normal_notes", false, "NORMAL_NOTES");
        public final static Property Hard_difficulty = new Property(16, Short.class, "hard_difficulty", false, "HARD_DIFFICULTY");
        public final static Property Hard_notes = new Property(17, Short.class, "hard_notes", false, "HARD_NOTES");
        public final static Property Expert_difficulty = new Property(18, Short.class, "expert_difficulty", false, "EXPERT_DIFFICULTY");
        public final static Property Expert_random_difficulty = new Property(19, Short.class, "expert_random_difficulty", false, "EXPERT_RANDOM_DIFFICULTY");
        public final static Property Expert_notes = new Property(20, Short.class, "expert_notes", false, "EXPERT_NOTES");
        public final static Property Available = new Property(21, Boolean.class, "available", false, "AVAILABLE");
        public final static Property Itunes_id = new Property(22, Long.class, "itunes_id", false, "ITUNES_ID");
    };

    private DaoSession daoSession;


    public SongDao(DaoConfig config) {
        super(config);
    }
    
    public SongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ROMAJI_NAME\" TEXT," + // 2: romaji_name
                "\"TRANSLATED_NAME\" TEXT," + // 3: translated_name
                "\"ATTRIBUTE\" TEXT," + // 4: attribute
                "\"BPM\" INTEGER," + // 5: BPM
                "\"TIME\" INTEGER," + // 6: time
                "\"EVENT_ID\" INTEGER NOT NULL ," + // 7: eventId
                "\"RANK\" INTEGER," + // 8: rank
                "\"DAILY_ROTATION\" TEXT," + // 9: daily_rotation
                "\"DAILY_ROTATION_POSITION\" INTEGER," + // 10: daily_rotation_position
                "\"IMAGE\" TEXT," + // 11: image
                "\"EASY_DIFFICULTY\" INTEGER," + // 12: easy_difficulty
                "\"EASY_NOTES\" INTEGER," + // 13: easy_notes
                "\"NORMAL_DIFFICULTY\" INTEGER," + // 14: normal_difficulty
                "\"NORMAL_NOTES\" INTEGER," + // 15: normal_notes
                "\"HARD_DIFFICULTY\" INTEGER," + // 16: hard_difficulty
                "\"HARD_NOTES\" INTEGER," + // 17: hard_notes
                "\"EXPERT_DIFFICULTY\" INTEGER," + // 18: expert_difficulty
                "\"EXPERT_RANDOM_DIFFICULTY\" INTEGER," + // 19: expert_random_difficulty
                "\"EXPERT_NOTES\" INTEGER," + // 20: expert_notes
                "\"AVAILABLE\" INTEGER," + // 21: available
                "\"ITUNES_ID\" INTEGER);"); // 22: itunes_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Song entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String romaji_name = entity.getRomaji_name();
        if (romaji_name != null) {
            stmt.bindString(3, romaji_name);
        }
 
        String translated_name = entity.getTranslated_name();
        if (translated_name != null) {
            stmt.bindString(4, translated_name);
        }
 
        String attribute = entity.getAttribute();
        if (attribute != null) {
            stmt.bindString(5, attribute);
        }
 
        Short BPM = entity.getBPM();
        if (BPM != null) {
            stmt.bindLong(6, BPM);
        }
 
        Short time = entity.getTime();
        if (time != null) {
            stmt.bindLong(7, time);
        }
        stmt.bindLong(8, entity.getEventId());
 
        Short rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(9, rank);
        }
 
        String daily_rotation = entity.getDaily_rotation();
        if (daily_rotation != null) {
            stmt.bindString(10, daily_rotation);
        }
 
        Short daily_rotation_position = entity.getDaily_rotation_position();
        if (daily_rotation_position != null) {
            stmt.bindLong(11, daily_rotation_position);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(12, image);
        }
 
        Short easy_difficulty = entity.getEasy_difficulty();
        if (easy_difficulty != null) {
            stmt.bindLong(13, easy_difficulty);
        }
 
        Short easy_notes = entity.getEasy_notes();
        if (easy_notes != null) {
            stmt.bindLong(14, easy_notes);
        }
 
        Short normal_difficulty = entity.getNormal_difficulty();
        if (normal_difficulty != null) {
            stmt.bindLong(15, normal_difficulty);
        }
 
        Short normal_notes = entity.getNormal_notes();
        if (normal_notes != null) {
            stmt.bindLong(16, normal_notes);
        }
 
        Short hard_difficulty = entity.getHard_difficulty();
        if (hard_difficulty != null) {
            stmt.bindLong(17, hard_difficulty);
        }
 
        Short hard_notes = entity.getHard_notes();
        if (hard_notes != null) {
            stmt.bindLong(18, hard_notes);
        }
 
        Short expert_difficulty = entity.getExpert_difficulty();
        if (expert_difficulty != null) {
            stmt.bindLong(19, expert_difficulty);
        }
 
        Short expert_random_difficulty = entity.getExpert_random_difficulty();
        if (expert_random_difficulty != null) {
            stmt.bindLong(20, expert_random_difficulty);
        }
 
        Short expert_notes = entity.getExpert_notes();
        if (expert_notes != null) {
            stmt.bindLong(21, expert_notes);
        }
 
        Boolean available = entity.getAvailable();
        if (available != null) {
            stmt.bindLong(22, available ? 1L: 0L);
        }
 
        Long itunes_id = entity.getItunes_id();
        if (itunes_id != null) {
            stmt.bindLong(23, itunes_id);
        }
    }

    @Override
    protected void attachEntity(Song entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Song readEntity(Cursor cursor, int offset) {
        Song entity = new Song( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // romaji_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // translated_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // attribute
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // BPM
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6), // time
            cursor.getLong(offset + 7), // eventId
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8), // rank
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // daily_rotation
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // daily_rotation_position
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // image
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12), // easy_difficulty
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13), // easy_notes
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14), // normal_difficulty
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15), // normal_notes
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16), // hard_difficulty
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17), // hard_notes
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18), // expert_difficulty
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19), // expert_random_difficulty
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20), // expert_notes
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // available
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22) // itunes_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Song entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRomaji_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTranslated_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttribute(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBPM(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6));
        entity.setEventId(cursor.getLong(offset + 7));
        entity.setRank(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8));
        entity.setDaily_rotation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDaily_rotation_position(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEasy_difficulty(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12));
        entity.setEasy_notes(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13));
        entity.setNormal_difficulty(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14));
        entity.setNormal_notes(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15));
        entity.setHard_difficulty(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16));
        entity.setHard_notes(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17));
        entity.setExpert_difficulty(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18));
        entity.setExpert_random_difficulty(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19));
        entity.setExpert_notes(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20));
        entity.setAvailable(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setItunes_id(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Song entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Song entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEventDao().getAllColumns());
            builder.append(" FROM SONG T");
            builder.append(" LEFT JOIN EVENT T0 ON T.\"EVENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Song loadCurrentDeep(Cursor cursor, boolean lock) {
        Song entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
         if(event != null) {
            entity.setEvent(event);
        }

        return entity;    
    }

    public Song loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Song> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Song> list = new ArrayList<Song>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Song> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Song> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
