package com.thoughtworks.lhli.lovelive_rock.data;

import com.thoughtworks.lhli.lovelive_rock.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SONG".
 */
public class Song implements java.io.Serializable {

    private Long id;
    private String name;
    private String romaji_name;
    private String translated_name;
    private String attribute;
    private Short BPM;
    private Short time;
    private long eventId;
    private Short rank;
    private String daily_rotation;
    private Short daily_rotation_position;
    private String image;
    private Short easy_difficulty;
    private Short easy_notes;
    private Short normal_difficulty;
    private Short normal_notes;
    private Short hard_difficulty;
    private Short hard_notes;
    private Short expert_difficulty;
    private Short expert_random_difficulty;
    private Short expert_notes;
    private Boolean available;
    private Long itunes_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SongDao myDao;

    private Event event;
    private Long event__resolvedKey;


    public Song() {
    }

    public Song(Long id) {
        this.id = id;
    }

    public Song(Long id, String name, String romaji_name, String translated_name, String attribute, Short BPM, Short time, long eventId, Short rank, String daily_rotation, Short daily_rotation_position, String image, Short easy_difficulty, Short easy_notes, Short normal_difficulty, Short normal_notes, Short hard_difficulty, Short hard_notes, Short expert_difficulty, Short expert_random_difficulty, Short expert_notes, Boolean available, Long itunes_id) {
        this.id = id;
        this.name = name;
        this.romaji_name = romaji_name;
        this.translated_name = translated_name;
        this.attribute = attribute;
        this.BPM = BPM;
        this.time = time;
        this.eventId = eventId;
        this.rank = rank;
        this.daily_rotation = daily_rotation;
        this.daily_rotation_position = daily_rotation_position;
        this.image = image;
        this.easy_difficulty = easy_difficulty;
        this.easy_notes = easy_notes;
        this.normal_difficulty = normal_difficulty;
        this.normal_notes = normal_notes;
        this.hard_difficulty = hard_difficulty;
        this.hard_notes = hard_notes;
        this.expert_difficulty = expert_difficulty;
        this.expert_random_difficulty = expert_random_difficulty;
        this.expert_notes = expert_notes;
        this.available = available;
        this.itunes_id = itunes_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSongDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRomaji_name() {
        return romaji_name;
    }

    public void setRomaji_name(String romaji_name) {
        this.romaji_name = romaji_name;
    }

    public String getTranslated_name() {
        return translated_name;
    }

    public void setTranslated_name(String translated_name) {
        this.translated_name = translated_name;
    }

    public String getAttribute() {
        return attribute;
    }

    public void setAttribute(String attribute) {
        this.attribute = attribute;
    }

    public Short getBPM() {
        return BPM;
    }

    public void setBPM(Short BPM) {
        this.BPM = BPM;
    }

    public Short getTime() {
        return time;
    }

    public void setTime(Short time) {
        this.time = time;
    }

    public long getEventId() {
        return eventId;
    }

    public void setEventId(long eventId) {
        this.eventId = eventId;
    }

    public Short getRank() {
        return rank;
    }

    public void setRank(Short rank) {
        this.rank = rank;
    }

    public String getDaily_rotation() {
        return daily_rotation;
    }

    public void setDaily_rotation(String daily_rotation) {
        this.daily_rotation = daily_rotation;
    }

    public Short getDaily_rotation_position() {
        return daily_rotation_position;
    }

    public void setDaily_rotation_position(Short daily_rotation_position) {
        this.daily_rotation_position = daily_rotation_position;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public Short getEasy_difficulty() {
        return easy_difficulty;
    }

    public void setEasy_difficulty(Short easy_difficulty) {
        this.easy_difficulty = easy_difficulty;
    }

    public Short getEasy_notes() {
        return easy_notes;
    }

    public void setEasy_notes(Short easy_notes) {
        this.easy_notes = easy_notes;
    }

    public Short getNormal_difficulty() {
        return normal_difficulty;
    }

    public void setNormal_difficulty(Short normal_difficulty) {
        this.normal_difficulty = normal_difficulty;
    }

    public Short getNormal_notes() {
        return normal_notes;
    }

    public void setNormal_notes(Short normal_notes) {
        this.normal_notes = normal_notes;
    }

    public Short getHard_difficulty() {
        return hard_difficulty;
    }

    public void setHard_difficulty(Short hard_difficulty) {
        this.hard_difficulty = hard_difficulty;
    }

    public Short getHard_notes() {
        return hard_notes;
    }

    public void setHard_notes(Short hard_notes) {
        this.hard_notes = hard_notes;
    }

    public Short getExpert_difficulty() {
        return expert_difficulty;
    }

    public void setExpert_difficulty(Short expert_difficulty) {
        this.expert_difficulty = expert_difficulty;
    }

    public Short getExpert_random_difficulty() {
        return expert_random_difficulty;
    }

    public void setExpert_random_difficulty(Short expert_random_difficulty) {
        this.expert_random_difficulty = expert_random_difficulty;
    }

    public Short getExpert_notes() {
        return expert_notes;
    }

    public void setExpert_notes(Short expert_notes) {
        this.expert_notes = expert_notes;
    }

    public Boolean getAvailable() {
        return available;
    }

    public void setAvailable(Boolean available) {
        this.available = available;
    }

    public Long getItunes_id() {
        return itunes_id;
    }

    public void setItunes_id(Long itunes_id) {
        this.itunes_id = itunes_id;
    }

    /** To-one relationship, resolved on first access. */
    public Event getEvent() {
        long __key = this.eventId;
        if (event__resolvedKey == null || !event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            Event eventNew = targetDao.load(__key);
            synchronized (this) {
                event = eventNew;
            	event__resolvedKey = __key;
            }
        }
        return event;
    }

    public void setEvent(Event event) {
        if (event == null) {
            throw new DaoException("To-one property 'eventId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.event = event;
            eventId = event.getId();
            event__resolvedKey = eventId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
