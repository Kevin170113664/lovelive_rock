package com.thoughtworks.lhli.lovelive_rock.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardId = new Property(1, String.class, "cardId", false, "CARD_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property JapaneseName = new Property(3, String.class, "japaneseName", false, "JAPANESE_NAME");
        public final static Property IdolId = new Property(4, long.class, "idolId", false, "IDOL_ID");
        public final static Property JapaneseCollection = new Property(5, String.class, "japaneseCollection", false, "JAPANESE_COLLECTION");
        public final static Property Rarity = new Property(6, String.class, "rarity", false, "RARITY");
        public final static Property Attribute = new Property(7, String.class, "attribute", false, "ATTRIBUTE");
        public final static Property JapaneseAttribute = new Property(8, String.class, "japaneseAttribute", false, "JAPANESE_ATTRIBUTE");
        public final static Property IsPromo = new Property(9, Boolean.class, "isPromo", false, "IS_PROMO");
        public final static Property PromoItem = new Property(10, String.class, "promoItem", false, "PROMO_ITEM");
        public final static Property ReleaseDate = new Property(11, String.class, "releaseDate", false, "RELEASE_DATE");
        public final static Property JapanOnly = new Property(12, Boolean.class, "japanOnly", false, "JAPAN_ONLY");
        public final static Property EventId = new Property(13, long.class, "eventId", false, "EVENT_ID");
        public final static Property IsSpecial = new Property(14, Boolean.class, "isSpecial", false, "IS_SPECIAL");
        public final static Property Hp = new Property(15, String.class, "hp", false, "HP");
        public final static Property MinimumStatisticsSmile = new Property(16, String.class, "minimumStatisticsSmile", false, "MINIMUM_STATISTICS_SMILE");
        public final static Property MinimumStatisticsPure = new Property(17, String.class, "minimumStatisticsPure", false, "MINIMUM_STATISTICS_PURE");
        public final static Property MinimumStatisticsCool = new Property(18, String.class, "minimumStatisticsCool", false, "MINIMUM_STATISTICS_COOL");
        public final static Property NonIdolizedMaximumStatisticsSmile = new Property(19, String.class, "nonIdolizedMaximumStatisticsSmile", false, "NON_IDOLIZED_MAXIMUM_STATISTICS_SMILE");
        public final static Property NonIdolizedMaximumStatisticsPure = new Property(20, String.class, "nonIdolizedMaximumStatisticsPure", false, "NON_IDOLIZED_MAXIMUM_STATISTICS_PURE");
        public final static Property NonIdolizedMaximumStatisticsCool = new Property(21, String.class, "nonIdolizedMaximumStatisticsCool", false, "NON_IDOLIZED_MAXIMUM_STATISTICS_COOL");
        public final static Property IdolizedMaximumStatisticsSmile = new Property(22, String.class, "idolizedMaximumStatisticsSmile", false, "IDOLIZED_MAXIMUM_STATISTICS_SMILE");
        public final static Property IdolizedMaximumStatisticsPure = new Property(23, String.class, "idolizedMaximumStatisticsPure", false, "IDOLIZED_MAXIMUM_STATISTICS_PURE");
        public final static Property IdolizedMaximumStatisticsCool = new Property(24, String.class, "idolizedMaximumStatisticsCool", false, "IDOLIZED_MAXIMUM_STATISTICS_COOL");
        public final static Property Skill = new Property(25, String.class, "skill", false, "SKILL");
        public final static Property JapaneseSkill = new Property(26, String.class, "japaneseSkill", false, "JAPANESE_SKILL");
        public final static Property SkillDetails = new Property(27, String.class, "skillDetails", false, "SKILL_DETAILS");
        public final static Property JapaneseSkillDetails = new Property(28, String.class, "japaneseSkillDetails", false, "JAPANESE_SKILL_DETAILS");
        public final static Property CenterSkill = new Property(29, String.class, "centerSkill", false, "CENTER_SKILL");
        public final static Property JapaneseCenterSkill = new Property(30, String.class, "japaneseCenterSkill", false, "JAPANESE_CENTER_SKILL");
        public final static Property JapaneseCenterSkillDetails = new Property(31, String.class, "japaneseCenterSkillDetails", false, "JAPANESE_CENTER_SKILL_DETAILS");
        public final static Property CardImage = new Property(32, String.class, "cardImage", false, "CARD_IMAGE");
        public final static Property CardIdolizedImage = new Property(33, String.class, "cardIdolizedImage", false, "CARD_IDOLIZED_IMAGE");
        public final static Property RoundCardImage = new Property(34, String.class, "roundCardImage", false, "ROUND_CARD_IMAGE");
        public final static Property RoundCardIdolizedImage = new Property(35, String.class, "roundCardIdolizedImage", false, "ROUND_CARD_IDOLIZED_IMAGE");
        public final static Property VideoStory = new Property(36, String.class, "videoStory", false, "VIDEO_STORY");
        public final static Property JapaneseVideoStory = new Property(37, String.class, "japaneseVideoStory", false, "JAPANESE_VIDEO_STORY");
        public final static Property WebsiteUrl = new Property(38, String.class, "websiteUrl", false, "WEBSITE_URL");
        public final static Property NonIdolizedMaxLevel = new Property(39, String.class, "nonIdolizedMaxLevel", false, "NON_IDOLIZED_MAX_LEVEL");
        public final static Property IdolizedMaxLevel = new Property(40, String.class, "idolizedMaxLevel", false, "IDOLIZED_MAX_LEVEL");
        public final static Property OwnedCards = new Property(41, String.class, "ownedCards", false, "OWNED_CARDS");
        public final static Property TransparentImage = new Property(42, String.class, "transparentImage", false, "TRANSPARENT_IMAGE");
        public final static Property TransparentIdolizedImage = new Property(43, String.class, "transparentIdolizedImage", false, "TRANSPARENT_IDOLIZED_IMAGE");
        public final static Property TransparentUrPair = new Property(44, String.class, "transparentUrPair", false, "TRANSPARENT_UR_PAIR");
        public final static Property TransparentIdolizedUrPair = new Property(45, String.class, "transparentIdolizedUrPair", false, "TRANSPARENT_IDOLIZED_UR_PAIR");
        public final static Property CleanUr = new Property(46, String.class, "cleanUr", false, "CLEAN_UR");
        public final static Property CleanUrIdolized = new Property(47, String.class, "cleanUrIdolized", false, "CLEAN_UR_IDOLIZED");
    };

    private DaoSession daoSession;


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CARD_ID\" TEXT," + // 1: cardId
                "\"NAME\" TEXT," + // 2: name
                "\"JAPANESE_NAME\" TEXT," + // 3: japaneseName
                "\"IDOL_ID\" INTEGER NOT NULL ," + // 4: idolId
                "\"JAPANESE_COLLECTION\" TEXT," + // 5: japaneseCollection
                "\"RARITY\" TEXT," + // 6: rarity
                "\"ATTRIBUTE\" TEXT," + // 7: attribute
                "\"JAPANESE_ATTRIBUTE\" TEXT," + // 8: japaneseAttribute
                "\"IS_PROMO\" INTEGER," + // 9: isPromo
                "\"PROMO_ITEM\" TEXT," + // 10: promoItem
                "\"RELEASE_DATE\" TEXT," + // 11: releaseDate
                "\"JAPAN_ONLY\" INTEGER," + // 12: japanOnly
                "\"EVENT_ID\" INTEGER NOT NULL ," + // 13: eventId
                "\"IS_SPECIAL\" INTEGER," + // 14: isSpecial
                "\"HP\" TEXT," + // 15: hp
                "\"MINIMUM_STATISTICS_SMILE\" TEXT," + // 16: minimumStatisticsSmile
                "\"MINIMUM_STATISTICS_PURE\" TEXT," + // 17: minimumStatisticsPure
                "\"MINIMUM_STATISTICS_COOL\" TEXT," + // 18: minimumStatisticsCool
                "\"NON_IDOLIZED_MAXIMUM_STATISTICS_SMILE\" TEXT," + // 19: nonIdolizedMaximumStatisticsSmile
                "\"NON_IDOLIZED_MAXIMUM_STATISTICS_PURE\" TEXT," + // 20: nonIdolizedMaximumStatisticsPure
                "\"NON_IDOLIZED_MAXIMUM_STATISTICS_COOL\" TEXT," + // 21: nonIdolizedMaximumStatisticsCool
                "\"IDOLIZED_MAXIMUM_STATISTICS_SMILE\" TEXT," + // 22: idolizedMaximumStatisticsSmile
                "\"IDOLIZED_MAXIMUM_STATISTICS_PURE\" TEXT," + // 23: idolizedMaximumStatisticsPure
                "\"IDOLIZED_MAXIMUM_STATISTICS_COOL\" TEXT," + // 24: idolizedMaximumStatisticsCool
                "\"SKILL\" TEXT," + // 25: skill
                "\"JAPANESE_SKILL\" TEXT," + // 26: japaneseSkill
                "\"SKILL_DETAILS\" TEXT," + // 27: skillDetails
                "\"JAPANESE_SKILL_DETAILS\" TEXT," + // 28: japaneseSkillDetails
                "\"CENTER_SKILL\" TEXT," + // 29: centerSkill
                "\"JAPANESE_CENTER_SKILL\" TEXT," + // 30: japaneseCenterSkill
                "\"JAPANESE_CENTER_SKILL_DETAILS\" TEXT," + // 31: japaneseCenterSkillDetails
                "\"CARD_IMAGE\" TEXT," + // 32: cardImage
                "\"CARD_IDOLIZED_IMAGE\" TEXT," + // 33: cardIdolizedImage
                "\"ROUND_CARD_IMAGE\" TEXT," + // 34: roundCardImage
                "\"ROUND_CARD_IDOLIZED_IMAGE\" TEXT," + // 35: roundCardIdolizedImage
                "\"VIDEO_STORY\" TEXT," + // 36: videoStory
                "\"JAPANESE_VIDEO_STORY\" TEXT," + // 37: japaneseVideoStory
                "\"WEBSITE_URL\" TEXT," + // 38: websiteUrl
                "\"NON_IDOLIZED_MAX_LEVEL\" TEXT," + // 39: nonIdolizedMaxLevel
                "\"IDOLIZED_MAX_LEVEL\" TEXT," + // 40: idolizedMaxLevel
                "\"OWNED_CARDS\" TEXT," + // 41: ownedCards
                "\"TRANSPARENT_IMAGE\" TEXT," + // 42: transparentImage
                "\"TRANSPARENT_IDOLIZED_IMAGE\" TEXT," + // 43: transparentIdolizedImage
                "\"TRANSPARENT_UR_PAIR\" TEXT," + // 44: transparentUrPair
                "\"TRANSPARENT_IDOLIZED_UR_PAIR\" TEXT," + // 45: transparentIdolizedUrPair
                "\"CLEAN_UR\" TEXT," + // 46: cleanUr
                "\"CLEAN_UR_IDOLIZED\" TEXT);"); // 47: cleanUrIdolized
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(2, cardId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String japaneseName = entity.getJapaneseName();
        if (japaneseName != null) {
            stmt.bindString(4, japaneseName);
        }
        stmt.bindLong(5, entity.getIdolId());
 
        String japaneseCollection = entity.getJapaneseCollection();
        if (japaneseCollection != null) {
            stmt.bindString(6, japaneseCollection);
        }
 
        String rarity = entity.getRarity();
        if (rarity != null) {
            stmt.bindString(7, rarity);
        }
 
        String attribute = entity.getAttribute();
        if (attribute != null) {
            stmt.bindString(8, attribute);
        }
 
        String japaneseAttribute = entity.getJapaneseAttribute();
        if (japaneseAttribute != null) {
            stmt.bindString(9, japaneseAttribute);
        }
 
        Boolean isPromo = entity.getIsPromo();
        if (isPromo != null) {
            stmt.bindLong(10, isPromo ? 1L: 0L);
        }
 
        String promoItem = entity.getPromoItem();
        if (promoItem != null) {
            stmt.bindString(11, promoItem);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(12, releaseDate);
        }
 
        Boolean japanOnly = entity.getJapanOnly();
        if (japanOnly != null) {
            stmt.bindLong(13, japanOnly ? 1L: 0L);
        }
        stmt.bindLong(14, entity.getEventId());
 
        Boolean isSpecial = entity.getIsSpecial();
        if (isSpecial != null) {
            stmt.bindLong(15, isSpecial ? 1L: 0L);
        }
 
        String hp = entity.getHp();
        if (hp != null) {
            stmt.bindString(16, hp);
        }
 
        String minimumStatisticsSmile = entity.getMinimumStatisticsSmile();
        if (minimumStatisticsSmile != null) {
            stmt.bindString(17, minimumStatisticsSmile);
        }
 
        String minimumStatisticsPure = entity.getMinimumStatisticsPure();
        if (minimumStatisticsPure != null) {
            stmt.bindString(18, minimumStatisticsPure);
        }
 
        String minimumStatisticsCool = entity.getMinimumStatisticsCool();
        if (minimumStatisticsCool != null) {
            stmt.bindString(19, minimumStatisticsCool);
        }
 
        String nonIdolizedMaximumStatisticsSmile = entity.getNonIdolizedMaximumStatisticsSmile();
        if (nonIdolizedMaximumStatisticsSmile != null) {
            stmt.bindString(20, nonIdolizedMaximumStatisticsSmile);
        }
 
        String nonIdolizedMaximumStatisticsPure = entity.getNonIdolizedMaximumStatisticsPure();
        if (nonIdolizedMaximumStatisticsPure != null) {
            stmt.bindString(21, nonIdolizedMaximumStatisticsPure);
        }
 
        String nonIdolizedMaximumStatisticsCool = entity.getNonIdolizedMaximumStatisticsCool();
        if (nonIdolizedMaximumStatisticsCool != null) {
            stmt.bindString(22, nonIdolizedMaximumStatisticsCool);
        }
 
        String idolizedMaximumStatisticsSmile = entity.getIdolizedMaximumStatisticsSmile();
        if (idolizedMaximumStatisticsSmile != null) {
            stmt.bindString(23, idolizedMaximumStatisticsSmile);
        }
 
        String idolizedMaximumStatisticsPure = entity.getIdolizedMaximumStatisticsPure();
        if (idolizedMaximumStatisticsPure != null) {
            stmt.bindString(24, idolizedMaximumStatisticsPure);
        }
 
        String idolizedMaximumStatisticsCool = entity.getIdolizedMaximumStatisticsCool();
        if (idolizedMaximumStatisticsCool != null) {
            stmt.bindString(25, idolizedMaximumStatisticsCool);
        }
 
        String skill = entity.getSkill();
        if (skill != null) {
            stmt.bindString(26, skill);
        }
 
        String japaneseSkill = entity.getJapaneseSkill();
        if (japaneseSkill != null) {
            stmt.bindString(27, japaneseSkill);
        }
 
        String skillDetails = entity.getSkillDetails();
        if (skillDetails != null) {
            stmt.bindString(28, skillDetails);
        }
 
        String japaneseSkillDetails = entity.getJapaneseSkillDetails();
        if (japaneseSkillDetails != null) {
            stmt.bindString(29, japaneseSkillDetails);
        }
 
        String centerSkill = entity.getCenterSkill();
        if (centerSkill != null) {
            stmt.bindString(30, centerSkill);
        }
 
        String japaneseCenterSkill = entity.getJapaneseCenterSkill();
        if (japaneseCenterSkill != null) {
            stmt.bindString(31, japaneseCenterSkill);
        }
 
        String japaneseCenterSkillDetails = entity.getJapaneseCenterSkillDetails();
        if (japaneseCenterSkillDetails != null) {
            stmt.bindString(32, japaneseCenterSkillDetails);
        }
 
        String cardImage = entity.getCardImage();
        if (cardImage != null) {
            stmt.bindString(33, cardImage);
        }
 
        String cardIdolizedImage = entity.getCardIdolizedImage();
        if (cardIdolizedImage != null) {
            stmt.bindString(34, cardIdolizedImage);
        }
 
        String roundCardImage = entity.getRoundCardImage();
        if (roundCardImage != null) {
            stmt.bindString(35, roundCardImage);
        }
 
        String roundCardIdolizedImage = entity.getRoundCardIdolizedImage();
        if (roundCardIdolizedImage != null) {
            stmt.bindString(36, roundCardIdolizedImage);
        }
 
        String videoStory = entity.getVideoStory();
        if (videoStory != null) {
            stmt.bindString(37, videoStory);
        }
 
        String japaneseVideoStory = entity.getJapaneseVideoStory();
        if (japaneseVideoStory != null) {
            stmt.bindString(38, japaneseVideoStory);
        }
 
        String websiteUrl = entity.getWebsiteUrl();
        if (websiteUrl != null) {
            stmt.bindString(39, websiteUrl);
        }
 
        String nonIdolizedMaxLevel = entity.getNonIdolizedMaxLevel();
        if (nonIdolizedMaxLevel != null) {
            stmt.bindString(40, nonIdolizedMaxLevel);
        }
 
        String idolizedMaxLevel = entity.getIdolizedMaxLevel();
        if (idolizedMaxLevel != null) {
            stmt.bindString(41, idolizedMaxLevel);
        }
 
        String ownedCards = entity.getOwnedCards();
        if (ownedCards != null) {
            stmt.bindString(42, ownedCards);
        }
 
        String transparentImage = entity.getTransparentImage();
        if (transparentImage != null) {
            stmt.bindString(43, transparentImage);
        }
 
        String transparentIdolizedImage = entity.getTransparentIdolizedImage();
        if (transparentIdolizedImage != null) {
            stmt.bindString(44, transparentIdolizedImage);
        }
 
        String transparentUrPair = entity.getTransparentUrPair();
        if (transparentUrPair != null) {
            stmt.bindString(45, transparentUrPair);
        }
 
        String transparentIdolizedUrPair = entity.getTransparentIdolizedUrPair();
        if (transparentIdolizedUrPair != null) {
            stmt.bindString(46, transparentIdolizedUrPair);
        }

        String cleanUr = entity.getCleanUr();
        if (cleanUr != null) {
            stmt.bindString(47, cleanUr);
        }

        String cleanUrIdolized = entity.getCleanUrIdolized();
        if (cleanUrIdolized != null) {
            stmt.bindString(48, cleanUrIdolized);
        }
    }

    @Override
    protected void attachEntity(Card entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // japaneseName
            cursor.getLong(offset + 4), // idolId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // japaneseCollection
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rarity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // attribute
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // japaneseAttribute
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isPromo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // promoItem
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // releaseDate
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // japanOnly
            cursor.getLong(offset + 13), // eventId
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isSpecial
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // hp
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // minimumStatisticsSmile
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // minimumStatisticsPure
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // minimumStatisticsCool
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // nonIdolizedMaximumStatisticsSmile
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // nonIdolizedMaximumStatisticsPure
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // nonIdolizedMaximumStatisticsCool
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // idolizedMaximumStatisticsSmile
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // idolizedMaximumStatisticsPure
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // idolizedMaximumStatisticsCool
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // skill
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // japaneseSkill
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // skillDetails
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // japaneseSkillDetails
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // centerSkill
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // japaneseCenterSkill
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // japaneseCenterSkillDetails
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // cardImage
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // cardIdolizedImage
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // roundCardImage
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // roundCardIdolizedImage
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // videoStory
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // japaneseVideoStory
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // websiteUrl
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // nonIdolizedMaxLevel
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // idolizedMaxLevel
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // ownedCards
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // transparentImage
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // transparentIdolizedImage
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // transparentUrPair
                cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // transparentIdolizedUrPair
                cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // cleanUr
                cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47) // cleanUrIdolized
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJapaneseName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdolId(cursor.getLong(offset + 4));
        entity.setJapaneseCollection(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRarity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAttribute(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJapaneseAttribute(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsPromo(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setPromoItem(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReleaseDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setJapanOnly(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setEventId(cursor.getLong(offset + 13));
        entity.setIsSpecial(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setHp(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMinimumStatisticsSmile(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMinimumStatisticsPure(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMinimumStatisticsCool(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNonIdolizedMaximumStatisticsSmile(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNonIdolizedMaximumStatisticsPure(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setNonIdolizedMaximumStatisticsCool(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIdolizedMaximumStatisticsSmile(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIdolizedMaximumStatisticsPure(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIdolizedMaximumStatisticsCool(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSkill(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setJapaneseSkill(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSkillDetails(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setJapaneseSkillDetails(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCenterSkill(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setJapaneseCenterSkill(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setJapaneseCenterSkillDetails(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCardImage(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setCardIdolizedImage(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setRoundCardImage(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setRoundCardIdolizedImage(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setVideoStory(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setJapaneseVideoStory(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setWebsiteUrl(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setNonIdolizedMaxLevel(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setIdolizedMaxLevel(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setOwnedCards(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setTransparentImage(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setTransparentIdolizedImage(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setTransparentUrPair(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setTransparentIdolizedUrPair(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setCleanUr(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setCleanUrIdolized(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getIdolDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEventDao().getAllColumns());
            builder.append(" FROM CARD T");
            builder.append(" LEFT JOIN IDOL T0 ON T.\"IDOL_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN EVENT T1 ON T.\"EVENT_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Card loadCurrentDeep(Cursor cursor, boolean lock) {
        Card entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Idol idol = loadCurrentOther(daoSession.getIdolDao(), cursor, offset);
         if(idol != null) {
            entity.setIdol(idol);
        }
        offset += daoSession.getIdolDao().getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
         if(event != null) {
            entity.setEvent(event);
        }

        return entity;    
    }

    public Card loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Card> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Card> list = new ArrayList<Card>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Card> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Card> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
